package authorization.v2;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import lombok.AllArgsConstructor;
import lombok.Getter;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;

@AllArgsConstructor
@Getter
public class JWTToken {
    private String issuer;
    private String subject;
    private Long expiration;
    private LocalDateTime expirationUTCDateTime;

    public static JWTToken parseJWT(String jwt) throws ExpiredJwtException {
        final var tmp = jwt.split("\\.");
        final var jwtWithoutSign = tmp[0] + "." + tmp[1] + ".";
        final var claims = (Claims) Jwts.parser().parse(jwtWithoutSign).getBody();
        final var issuer = claims.getIssuer();
        final var subject = claims.getSubject();
        final var expiration = claims.getExpiration();
        // Get the expiration time from the claims
        final var expirationTime = expiration.getTime();
        // Convert milliseconds to Instant
        final var instant = Instant.ofEpochMilli(expirationTime);
        // Convert Instant to LocalDateTime using a specific time zone or offset
        final var expirationDateTime = instant.atZone(ZoneId.of("UTC")).toLocalDateTime();
        return new JWTToken(issuer, subject, expiration.getTime(), expirationDateTime);
    }
}
